local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
local Spawner = loadstring(game:HttpGet("https://codeberg.org/GrowAFilipino/GrowAGarden/raw/branch/main/Spawner.lua"))()

function gradient(text, startColor, endColor)
    local result = ""
    local length = #text

    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)

        local char = text:sub(i, i)
        result = result .. '<font color="rgb(' .. r .. ", " .. g .. ", " .. b .. ')">' .. char .. "</font>"
    end

    return result
end

local Confirmed = false

WindUI:Popup(
    {
        Title = "Loaded!!! Wisfloal Spawner",
        Icon = "sparkles",
        IconThemed = true,
        Content = "This is a " ..
            gradient("Server-sided spawner", Color3.fromHex("#00FF87"), Color3.fromHex("#60EFFF")) ..
                " for Grow A Garden",
        Buttons = {
            {
                Title = "Cancel",
                Callback = function()
                end,
                Variant = "Secondary"
            },
            {
                Title = "Continue",
                Icon = "arrow-right",
                Callback = function()
                    Confirmed = true
                end,
                Variant = "Primary"
            }
        }
    }
)

repeat
    wait()
until Confirmed

local Window =
    WindUI:CreateWindow(
    {
        Title = "Wisfloal Spawner Hub",
        Icon = "sparkles",
        IconThemed = true,
        Author = "Grow A Garden",
        Folder = "VisualSpawner",
        Size = UDim2.fromOffset(400, 320), -- Smaller size
        Transparent = false,
        Theme = "Dark",
        User = {
            Enabled = true,
            Callback = function()
                print("clicked")
            end,
            Anonymous = true
        },
        SideBarWidth = 140, -- Smaller sidebar
        ScrollBarEnabled = true
    }
)

Window:EditOpenButton(
    {
        Title = "Open Spawner",
        Icon = "sparkles",
        CornerRadius = UDim.new(0, 12),
        StrokeThickness = 2,
        Color = ColorSequence.new(Color3.fromHex("FF6B6B"), Color3.fromHex("4ECDC4")),
        Draggable = true
    }
)

local Tabs = {}

-- Create main section only
do
    Tabs.SpawnerSection =
        Window:Section(
        {
            Title = "Spawner Tools",
            Icon = "sparkles",
            Opened = true
        }
    )

    -- Spawner tabs
    Tabs.PetTab =
        Tabs.SpawnerSection:Tab(
        {
            Title = "Pets",
            Icon = "heart",
            Desc = "Spawn pets with custom stats"
        }
    )

    Tabs.SeedTab =
        Tabs.SpawnerSection:Tab(
        {
            Title = "Seeds",
            Icon = "leaf",
            Desc = "Spawn seeds in your garden"
        }
    )

    Tabs.EggTab =
        Tabs.SpawnerSection:Tab(
        {
            Title = "Eggs",
            Icon = "egg",
            Desc = "Spawn eggs for rare pets"
        }
    )

    Tabs.UITab =
        Tabs.SpawnerSection:Tab(
        {
            Title = "UI Color",
            Icon = "palette",
            Desc = "Customize UI colors and theme"
        }
    )
end

Window:SelectTab(1)

-- Pet Tab Implementation
local petName = "Raccoon"
local petWeight = 1
local petAge = 2

Tabs.PetTab:Paragraph(
    {
        Title = "Pet Spawner",
        Desc = "Enter the pet name and customize its stats before spawning",
        Image = "heart",
        Color = "Blue"
    }
)

Tabs.PetTab:Input(
    {
        Title = "Pet Name",
        Value = "Raccoon",
        InputIcon = "search",
        Placeholder = "Enter pet name (e.g., Raccoon, Cat, Dog)",
        Callback = function(input)
            petName = input
        end
    }
)

Tabs.PetTab:Slider(
    {
        Title = "Pet Weight (KG)",
        Value = {
            Min = 1,
            Max = 100,
            Default = 1
        },
        Callback = function(value)
            petWeight = value
        end
    }
)

Tabs.PetTab:Slider(
    {
        Title = "Pet Age",
        Value = {
            Min = 1,
            Max = 50,
            Default = 2
        },
        Callback = function(value)
            petAge = value
        end
    }
)

Tabs.PetTab:Button(
    {
        Title = "Spawn Pet",
        Icon = "plus-circle",
        Callback = function()
            if petName and petName ~= "" then
                local success, error =
                    pcall(
                    function()
                        Spawner.SpawnPet(petName, petWeight, petAge)
                    end
                )

                if success then
                    WindUI:Notify(
                        {
                            Title = "Pet Spawned!",
                            Content = petName .. " spawned with " .. petWeight .. "KG and age " .. petAge,
                            Icon = "heart",
                            Duration = 4
                        }
                    )
                else
                    WindUI:Notify(
                        {
                            Title = "Spawn Failed",
                            Content = "Failed to spawn " .. petName .. ". Check if the name is correct.",
                            Icon = "alert-circle",
                            Duration = 4
                        }
                    )
                end
            else
                WindUI:Notify(
                    {
                        Title = "Error",
                        Content = "Please enter a pet name!",
                        Icon = "alert-triangle",
                        Duration = 3
                    }
                )
            end
        end
    }
)

-- Seed Tab Implementation
local seedName = "Candy Blossom"

Tabs.SeedTab:Paragraph(
    {
        Title = "Seed Spawner",
        Desc = "Enter the seed name to spawn",
        Image = "leaf",
        Color = "Green"
    }
)

Tabs.SeedTab:Input(
    {
        Title = "Seed Name",
        Value = "Candy Blossom",
        InputIcon = "sprout",
        Placeholder = "Enter seed name (e.g., Candy Blossom, Sunflower)",
        Callback = function(input)
            seedName = input
        end
    }
)

Tabs.SeedTab:Button(
    {
        Title = "Spawn Seed",
        Icon = "sprout",
        Callback = function()
            if seedName and seedName ~= "" then
                local success, error =
                    pcall(
                    function()
                        Spawner.SpawnSeed(seedName)
                    end
                )

                if success then
                    WindUI:Notify(
                        {
                            Title = "Seed Spawned!",
                            Content = seedName .. " has been spawned Check your backpack",
                            Icon = "leaf",
                            Duration = 4
                        }
                    )
                else
                    WindUI:Notify(
                        {
                            Title = "Spawn Failed",
                            Content = "Failed to spawn " .. seedName .. ". Check if the name is correct.",
                            Icon = "alert-circle",
                            Duration = 4
                        }
                    )
                end
            else
                WindUI:Notify(
                    {
                        Title = "Error",
                        Content = "Please enter a seed name!",
                        Icon = "alert-triangle",
                        Duration = 3
                    }
                )
            end
        end
    }
)

-- Egg Tab Implementation
local eggName = "Night Egg"

Tabs.EggTab:Paragraph(
    {
        Title = "Egg Spawner",
        Desc = "Enter the egg name to spawn",
        Image = "egg",
        Color = "Orange"
    }
)

Tabs.EggTab:Input(
    {
        Title = "Egg Name",
        Value = "Night Egg",
        InputIcon = "gift",
        Placeholder = "Enter egg name (e.g., Night Egg, Bug Egg)",
        Callback = function(input)
            eggName = input
        end
    }
)

Tabs.EggTab:Button(
    {
        Title = "Spawn Egg",
        Icon = "gift",
        Callback = function()
            if eggName and eggName ~= "" then
                local success, error =
                    pcall(
                    function()
                        Spawner.SpawnEgg(eggName)
                    end
                )

                if success then
                    WindUI:Notify(
                        {
                            Title = "Egg Spawned!",
                            Content = eggName .. " has been spawned successfully",
                            Icon = "egg",
                            Duration = 4
                        }
                    )
                else
                    WindUI:Notify(
                        {
                            Title = "Spawn Failed",
                            Content = "Failed to spawn " .. eggName .. ". Check if the name is correct.",
                            Icon = "alert-circle",
                            Duration = 4
                        }
                    )
                end
            else
                WindUI:Notify(
                    {
                        Title = "Error",
                        Content = "Please enter an egg name!",
                        Icon = "alert-triangle",
                        Duration = 3
                    }
                )
            end
        end
    }
)

-- UI Color Tab Implementation
local currentThemeName = WindUI:GetCurrentTheme()
local themes = WindUI:GetThemes()

local ThemeAccent = themes[currentThemeName].Accent
local ThemeOutline = themes[currentThemeName].Outline
local ThemeText = themes[currentThemeName].Text
local ThemePlaceholderText = themes[currentThemeName].Placeholder

function updateTheme()
    WindUI:AddTheme(
        {
            Name = currentThemeName,
            Accent = ThemeAccent,
            Outline = ThemeOutline,
            Text = ThemeText,
            Placeholder = ThemePlaceholderText
        }
    )
    WindUI:SetTheme(currentThemeName)
end

Tabs.UITab:Paragraph(
    {
        Title = "UI Customization",
        Desc = "Change colors and theme of the interface",
        Image = "palette",
        Color = "Blue"
    }
)

-- Theme selector
local themeValues = {}
for name, _ in pairs(WindUI:GetThemes()) do
    table.insert(themeValues, name)
end

local themeDropdown =
    Tabs.UITab:Dropdown(
    {
        Title = "Select Theme",
        Values = themeValues,
        Value = WindUI:GetCurrentTheme(),
        Callback = function(theme)
            WindUI:SetTheme(theme)
            WindUI:Notify(
                {
                    Title = "Theme Changed",
                    Content = "Theme changed to " .. theme,
                    Icon = "palette",
                    Duration = 3
                }
            )
        end
    }
)

-- Transparency toggle
Tabs.UITab:Toggle(
    {
        Title = "Window Transparency",
        Value = false,
        Callback = function(enabled)
            Window:ToggleTransparency(enabled)
            WindUI:Notify(
                {
                    Title = "Transparency " .. (enabled and "Enabled" or "Disabled"),
                    Content = "Window transparency has been " .. (enabled and "enabled" or "disabled"),
                    Icon = enabled and "eye" or "eye-off",
                    Duration = 3
                }
            )
        end
    }
)

Tabs.UITab:Divider()

-- Custom theme creation
Tabs.UITab:Input(
    {
        Title = "Custom Theme Name",
        Value = currentThemeName,
        Placeholder = "Enter theme name",
        Callback = function(name)
            currentThemeName = name
        end
    }
)

Tabs.UITab:Colorpicker(
    {
        Title = "Accent Color",
        Default = Color3.fromHex(ThemeAccent),
        Callback = function(color)
            ThemeAccent = color:ToHex()
        end
    }
)

Tabs.UITab:Colorpicker(
    {
        Title = "Outline Color",
        Default = Color3.fromHex(ThemeOutline),
        Callback = function(color)
            ThemeOutline = color:ToHex()
        end
    }
)

Tabs.UITab:Colorpicker(
    {
        Title = "Text Color",
        Default = Color3.fromHex(ThemeText),
        Callback = function(color)
            ThemeText = color:ToHex()
        end
    }
)

Tabs.UITab:Colorpicker(
    {
        Title = "Placeholder Text Color",
        Default = Color3.fromHex(ThemePlaceholderText),
        Callback = function(color)
            ThemePlaceholderText = color:ToHex()
        end
    }
)

Tabs.UITab:Button(
    {
        Title = "Apply Custom Theme",
        Icon = "check",
        Callback = function()
            updateTheme()
            WindUI:Notify(
                {
                    Title = "Custom Theme Applied",
                    Content = "Theme '" .. currentThemeName .. "' has been applied",
                    Icon = "palette",
                    Duration = 4
                }
            )
        end
    }
)

-- Window close handler
Window:OnClose(
    function()
        print("Visual Spawner UI closed.")
    end
)
